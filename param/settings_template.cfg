# GLOBAL:
  outputDirectory = ./output/                # (string) where files will be written
  popSize = 150                       # (int) number of genomes in the populaiton
  randomSeed = 1                    # (int) seed for random number generator, if -1 random number generator will be seeded randomly
  updates = 10000                       # (int) how long the program will run

# ARCHIVIST:
  aveFileColumns = [update,score,genomeLength,gates] # (string) data to be saved into average file (must be values that can generate an average)
  aveFileName = ave.csv               # (string) name of average file (saves population averages)
  dominantFileName = dominant.csv     # (string) name of dominant file (saves data on dominant organism)
  realtimeFilesInterval = 100          # (int) How often to write to realtime data files
  writeAveFile = 1                    # (bool) Save data to average file?
  writeDominantFile = 1               # (bool) Save data to dominant file?

# ARCHIVIST - OUTPUT METHOD:
  outputMethod = SSwD              # (string) output method, [default, LODwAP (Line of Decent with Aggressive Pruning), snapshot, SSwD (SnapShot with Delay)]

# ARCHIVIST_LODWAP:
  dataFileName_LODwAP = data.csv      # (string) name of genome file (stores genomes for line of decent)
  dataInterval_LODwAP = 100            # (int) How often to write to data file
  genomeFileName_LODwAP = genome.csv  # (string) name of data file (stores everything but genomes)
  genomeInterval_LODwAP = 500          # (int) How often to write genome file
  pruneInterval_LODwAP = 100           # (int) How often to attempt to prune LOD and actually write out to files
  terminateAfter_LODwAP = 100         # (int) how long to run after updates (to get better coalescence)
  writeDataFile_LODwAP = 1            # (bool) if true, a data file will be written
  writeGenomeFile_LODwAP = 1          # (bool) if true, a genome file will be written

# ARCHIVIST_SNAPSHOT:
  dataFilePrefix_SS = data            # (string) name of genome file (stores genomes)
  dataInterval_SS = 100                # (int) How often to save a data file
  genomeFilePrefix_SS = genome        # (string) name of data file (stores everything but genomes)
  genomeInterval_SS = 1000              # (int) How often to save a genome file
  writeDataFiles_SS = 1               # (bool) if true, data files will be written
  writeGenomeFiles_SS = 1             # (bool) if true, genome files will be written

# ARCHIVIST_SSWD:
  cleanupInterval_SSwD = 500           # (int) How often to cleanup old checkpoints
  dataFilePrefix_SSwD = data          # (string) name of genome file (stores genomes)
  dataIntervalDelay_SSwD = 500          # (int) when using Snap Shot with Delay output Method, how long is the delay before saving data
  dataInterval_SSwD = 500              # (int) How often to save a data file
  genomeFilePrefix_SSwD = genome      # (string) name of data file (stores everything but genomes)
  genomeIntervalDelay_SSwD = 500        # (int) when using Snap Shot with Delay output Method, how long is the delay before saving genomes
  genomeInterval_SSwD = 500            # (int) How often to save a genome file
  writeDataFiles_SSwD = 1             # (bool) if true, data files will be written
  writeGenomeFiles_SSwD = 1           # (bool) if true, genome files will be written

# BRAIN:
  bitsPerBrainAddress = 8             # (int) how many bits are evaluated to determine the brain addresses
  brainSize = 15                      # (int) number of Brain Values
  serialProcessing = 0                # (bool) sets brains to overwrite... right?

# GATE TYPES:
  deterministicGate = 1               # (bool) set to true to enable deterministic gates?
  feedBackGate = 0                    # (bool) set to true to enable feedback gates
  fixedEpsilonGate = 0                # (bool) set to true to enable epsilon gates
  geneticProgramingGate = 0           # (bool) set to true to enable GP (what?) gates
  probabilisticGate = 1               # (bool) set to true to enable probabilistic gates
  thresholdGate = 0                   # (bool) set to true to enable threshold gates
  voidGate = 0                        # (bool) set to true to enable void gates

# GATES - FIXED EPSILON:
  fixedEpsilonGate_Probability = 0.05 # (double) chance that an output from a FixedEpsilonGate gate will be randomized

# GATES - VOID:
  voidGate_Probability = 0.05         # (double) chance that an output from a void gate will be set to 0

# GENOME:
  chromosomeSizeInitial = 1000        # (int) starting size for all chromosomes in genome (genome size will be chromosomeSizeInitial * number of chromosomes * ploidy)
  chromosomeSizeMax = 20000           # (int) if a chromosome is larger then this, mutations will only decrease chromosome size
  chromosomeSizeMin = 400             # (int) if a chromosome is smaller then this, mutations will only increase chromosome size
  chromosomes = 1                     # (int) number of chromosome pairs (i.e. if chromosomes = 2 and ploidy = 2 there will be 4 chromosomes in the genome)
  genomecrossCount = 3                # (int) number of crosses when performing crossover
  mutationCopyMaxSize = 200           # (int) maximum size of insertion mutation
  mutationCopyMinSize = 10            # (int) minimum size of insertion mutation
  mutationCopyRate = 2e-05            # (double) per genome insertion/deletion rate
  mutationDeletionMaxSize = 200       # (int) maximum size of insertion mutation
  mutationDeletionMinSize = 10        # (int) minimum size of insertion mutation
  mutationDeletionRate = 2e-05        # (double) insertion rate per 1000 genome sites
  ploidy = 1                          # (int) number of copies of each chromosome
  pointMutationRate = 0.005           # (double) per site mutation rate

# MAIN:
  MAIN_numSeedDeterministicGates = 5  # (int) Number of probabilistic gates to initially seed genome with.
  MAIN_numSeedProbabilisticGates = 5  # (int) Number of deterministic gates to initially seed genome with.

# OPTIMIZER:
  elitism = 0                         # (int) if the chosen optimizer allows for elitism, The highest scoring brain will be included in the next generation this many times (0 = no elitism)?
  optimizer = GA                      # (string) optimizer to be used in evolution loop, [GA, Tournament, Tournament2]

# OPTIMIZER - TOURNAMENT:
  tournamentSize = 5                  # (int) how many genomes to consider when doing Tournament selection? 1 will result in random selection.

# WORLD:
  repeats = 3                         # (int) Number of times to test each Genome per generation

# WORLD - FORAGE:
  FORAGE_areaSize = 128               # (int) area size -- how large is the food area in the middle of the world (area size X area size)
  FORAGE_granularity = 1              # (int) granularity -- the number of possible four cell squares to forage from
  FORAGE_predictability = 1           # (double) predictability -- how predictable the world refreshes food
  FORAGE_randomizeBehavior = 0        # (int) if set (1), organisms will behave randomly (brains aren't used)
  FORAGE_runTime = 1024               # (int) run time -- how long should the organism be allowed to forage
  FORAGE_tickLength = 32              # (int) tick length -- after how many ticks should the world change
